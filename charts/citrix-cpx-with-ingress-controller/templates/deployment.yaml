apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpx-ingress
spec:
  selector:
    matchLabels:
      app: cpx-ingress
  replicas: {{ .Values.replics }}
  template:
    metadata:
      name: cpx-ingress
      labels:
        app: cpx-ingress
      annotations:
    spec:
      serviceAccountName: cpx-ingress-k8s-role
      containers:
        - name: cpx-ingress
          image: "{{ .Values.image }}"
          imagePullPolicy: {{ .Values.pullPolicy }}
          securityContext:
             privileged: true
          env:
          - name: "EULA"
            value: {{ .Values.license.accept | quote }}
          - name: "KUBERNETES_TASK_ID"
            value: ""
          - name: "NS_USER"
            valueFrom:
             secretKeyRef:
              name: {{ .Values.cpxConfig.loginCredentials.secretName }}
              key: username
          - name: "NS_PASSWORD"
            valueFrom:
             secretKeyRef:
              name: {{ .Values.cpxConfig.loginCredentials.secretName }}
              key: password
{{- if .Values.lsIP }}
          - name: "LS_IP"
            value: {{ .Values.lsIP | quote }}
{{- end }}
{{- if .Values.lsPort }}
          - name: "LS_PORT"
            value: {{ .Values.lsPort | quote }}
{{- end }}
{{- if .Values.platform }}
          - name: "PLATFORM"
            value: {{ .Values.platform | quote }}
{{- end }}
{{- if .Values.bandwidth }}
          - name: "BANDWIDTH"
            value: {{ .Values.bandwidth | quote }}
{{- end }}
          volumeMounts:
            - mountPath: /cpx/conf/
              name: cpx-volume1
            - mountPath: /cpx/crash/
              name: cpx-volume2
{{- if .Values.cpxConfig.configmap.mount }}
            - name: cpx-configuration
              mountPath: /etc/cpx.conf
              subPath: cpx.conf
{{- end }}
{{- if .Values.cpxConfig.dhkeySecret.mount }}
            - name: dhkey
              mountPath: "/cpxsecret"
              readOnly: true
{{- end }}
{{- if .Values.cic.required }}
        # Add cic as a sidecar
        - name: cic
          image: "{{ .Values.cic.image }}"
          imagePullPolicy: {{ .Values.cic.pullPolicy }}
          env:
          - name: "EULA"
            value: "{{ .Values.license.accept }}"
          - name: "NS_IP"
            value: "127.0.0.1"
          - name: "NS_APPS_NAME_PREFIX"
            value: {{ .Values.nsNamespace | default "k8s"}}
          - name: "NS_DEPLOYMENT_MODE"
            value: "SIDECAR"
          - name: "NS_ENABLE_MONITORING"
            value: "YES"
          - name: "NS_USER"
            valueFrom:
             secretKeyRef:
              name: {{ .Values.cpxConfig.loginCredentials.secretName }}
              key: username
          - name: "NS_PASSWORD"
            valueFrom:
             secretKeyRef:
              name: {{ .Values.cpxConfig.loginCredentials.secretName }}
              key: password
{{- if .Values.logProxy }}
          - name: "NS_LOGPROXY"
            value: {{ .Values.logProxy | quote }}
{{- end }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
{{- if .Values.kubernetesURL }}
          - name: "kubernetes_url"
            value: "{{ .Values.kubernetesURL }}"
{{- end }}
          args:
            - --configmap
              {{ .Release.Namespace }}/cpx-cic-configmap
{{- if .Values.ingressClass }}
            - --ingress-class
{{- range .Values.ingressClass}}
              {{.}}
{{- end }}
{{- end }}
{{- if .Values.defaultSSLCert }}
            - --default-ssl-certificate
              {{ .Release.Namespace }}/{{ .Values.defaultSSLCert }}
{{- end }}
{{- end }}
{{- if .Values.exporter.required }}
        - name: exporter
          image: "{{ .Values.exporter.image }}"
          imagePullPolicy: {{ .Values.exporter.pullPolicy }}
          args:
            - "--secure=no"
            - "--target-nsip=127.0.0.1"
            - "--port={{ .Values.exporter.ports.containerPort }}"
          env:
          - name: "NS_USER"
            valueFrom:
             secretKeyRef:
              name: {{ .Values.cpxConfig.loginCredentials.secretName }}
              key: username
          - name: "NS_PASSWORD"
            valueFrom:
             secretKeyRef:
              name: {{ .Values.cpxConfig.loginCredentials.secretName }}
              key: password
          securityContext:
            readOnlyRootFilesystem: true
{{- end }}
      volumes:
        - name: cpx-volume1
          emptyDir: {}
        - name: cpx-volume2
          emptyDir: {}
{{- if .Values.cpxConfig.configmap.mount }}
        - name: cpx-configuration
          configMap:
            name: {{ .Values.cpxConfig.configmap.name }}
{{- end }}
{{- if .Values.cpxConfig.dhkeySecret.mount }}
        - name: dhkey
          secret:
            secretName: {{ .Values.cpxConfig.dhkeySecret.secretName }}
            items:
            - key: {{ .Values.cpxConfig.dhkeySecret.dhkeyName }}
              path: {{ .Values.cpxConfig.dhkeySecret.dhkeyName }}
{{- end }}
